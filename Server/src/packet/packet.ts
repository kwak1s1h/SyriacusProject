/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.2
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum MSGID {
    MSGBOX = 0,
    MOVEDATA = 1
}
export class MsgBox extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        context?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("context" in data && data.context != undefined) {
                this.context = data.context;
            }
        }
    }
    get context() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set context(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        context?: string;
    }): MsgBox {
        const message = new MsgBox({});
        if (data.context != null) {
            message.context = data.context;
        }
        return message;
    }
    toObject() {
        const data: {
            context?: string;
        } = {};
        if (this.context != null) {
            data.context = this.context;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.context.length)
            writer.writeString(1, this.context);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgBox {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgBox();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.context = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MsgBox {
        return MsgBox.deserialize(bytes);
    }
}
export class MoveData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        speed?: number;
        dir?: Position;
        pos?: Position;
        yRotation?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("speed" in data && data.speed != undefined) {
                this.speed = data.speed;
            }
            if ("dir" in data && data.dir != undefined) {
                this.dir = data.dir;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("yRotation" in data && data.yRotation != undefined) {
                this.yRotation = data.yRotation;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get speed() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set speed(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get dir() {
        return pb_1.Message.getWrapperField(this, Position, 3) as Position;
    }
    set dir(value: Position) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_dir() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, Position, 4) as Position;
    }
    set pos(value: Position) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get yRotation() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set yRotation(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        id?: string;
        speed?: number;
        dir?: ReturnType<typeof Position.prototype.toObject>;
        pos?: ReturnType<typeof Position.prototype.toObject>;
        yRotation?: number;
    }): MoveData {
        const message = new MoveData({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.speed != null) {
            message.speed = data.speed;
        }
        if (data.dir != null) {
            message.dir = Position.fromObject(data.dir);
        }
        if (data.pos != null) {
            message.pos = Position.fromObject(data.pos);
        }
        if (data.yRotation != null) {
            message.yRotation = data.yRotation;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            speed?: number;
            dir?: ReturnType<typeof Position.prototype.toObject>;
            pos?: ReturnType<typeof Position.prototype.toObject>;
            yRotation?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.speed != null) {
            data.speed = this.speed;
        }
        if (this.dir != null) {
            data.dir = this.dir.toObject();
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.yRotation != null) {
            data.yRotation = this.yRotation;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.speed != 0)
            writer.writeFloat(2, this.speed);
        if (this.has_dir)
            writer.writeMessage(3, this.dir, () => this.dir.serialize(writer));
        if (this.has_pos)
            writer.writeMessage(4, this.pos, () => this.pos.serialize(writer));
        if (this.yRotation != 0)
            writer.writeFloat(5, this.yRotation);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MoveData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MoveData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.speed = reader.readFloat();
                    break;
                case 3:
                    reader.readMessage(message.dir, () => message.dir = Position.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.pos, () => message.pos = Position.deserialize(reader));
                    break;
                case 5:
                    message.yRotation = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MoveData {
        return MoveData.deserialize(bytes);
    }
}
export class Position extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        z?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("z" in data && data.z != undefined) {
                this.z = data.z;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get z() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set z(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        z?: number;
    }): Position {
        const message = new Position({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.z != null) {
            message.z = data.z;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            z?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.z != null) {
            data.z = this.z;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeFloat(1, this.x);
        if (this.y != 0)
            writer.writeFloat(2, this.y);
        if (this.z != 0)
            writer.writeFloat(3, this.z);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Position {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Position();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                case 3:
                    message.z = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Position {
        return Position.deserialize(bytes);
    }
}
